# SPDX-FileCopyrightText: 2025 The Reusable CI Authors
#
# SPDX-License-Identifier: CC0-1.0
# Development NPM Package Builder
# 
# Purpose: Fast npm package builds for development and testing.
#
# How it works:
# 1. Checks out repository code
# 2. Builds project (NPM build)
# 3. Builds npm package for dev purpose
# 4. Tags with version, branch name, and SHA (e.g., 0.5.9-dev-feat-awesome-abc1234)
# 5. Pushes to Github Packages (npm) for development testing
#
# Security controls:
# - Minimal - optimized for speed over security
# - Packages clearly marked with -dev suffix
# - Basic authentication to Github npm package registry
# - No production features enabled
#
# Required Secrets:
#   None - uses GITHUB_TOKEN for Github npm package registry authentication
#
# Required Permissions:
#   contents: read   # Read source code
#   packages: write  # Push images to Github Packages
#
# Outputs:
#   package: NPM package
name: Build Dev npm package to Github Packages

on:
  workflow_call:
    inputs:
      nodeVersion:
        description: "Node.js version"
        required: false
        default: "22"
        type: string
      workingDirectory:
        description: "Working directory"
        required: false
        default: "."
        type: string
      registry:
        description: "Package registry"
        required: false
        default: "https://npm.pkg.github.com"
        type: string
    outputs:
      packageName:
        description: "Name from package.json (after dev version applied)"
        value: ${{ jobs.publish.outputs.packageName }}
      packageVersion:
        description: "Published dev version"
        value: ${{ jobs.publish.outputs.packageVersion }}
      didPublish:
        description: "Whether publish ran"
        value: ${{ jobs.publish.outputs.didPublish }}
permissions:
  contents: read
jobs:
  build-and-push:
    name: Build & Publish dev package
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      packageName: ${{ steps.meta.outputs.name }}
      packageVersion: ${{ steps.tags.outputs.version }}
      didPublish: ${{ steps.publish.outputs.did_publish }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.nodeVersion }}
          registry-url: ${{ inputs.registry }}
          cache: npm
          cache-dependency-path: ${{ inputs.workingDirectory }}/package-lock.json
      - name: Read package metadata
        id: meta
        working-directory: ${{ inputs.workingDirectory }}
        run: |
          NAME=$(node -p "require('./package.json').name")
          echo "name=$NAME" >> "$GITHUB_OUTPUT"
      - name: Ensure @diggsweden scope
        working-directory: ${{ inputs.workingDirectory }}
        run: |
          NAME=$(node -p "require('./package.json').name")
          if [[ "$NAME" != @diggsweden/* ]]; then
            echo "::error::package.json name must be scoped as @diggsweden/<pkg>"
            echo "Found: $NAME"
            exit 1
          fi
          npm config set @diggsweden:registry https://npm.pkg.github.com
      - name: Generate dev tags
        id: tags
        shell: bash
        working-directory: ${{ inputs.workingDirectory }}
        run: |
          set -euo pipefail
          git fetch --tags || true

          LATEST_TAG=$(git describe --tags --match="v[0-9]*.[0-9]*.[0-9]*" --abbrev=0 2>/dev/null \
            || git tag -l "v[0-9]*.[0-9]*.[0-9]*" | sort -V | tail -n1 || echo "")

          if [ -z "$LATEST_TAG" ]; then
            BASE_VERSION="0.0.0"
          else
            BASE_VERSION="${LATEST_TAG#v}"
          fi

          BRANCH_NAME="${GITHUB_REF_NAME:-${GITHUB_REF#refs/heads/}}"
          SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's|[^a-zA-Z0-9._-]|-|g' | sed 's|^-*||; s|-*$||')
          SHORT_SHA=$(git rev-parse --short=7 HEAD)

          DEV_VERSION="${BASE_VERSION}-dev-${SANITIZED_BRANCH}-${SHORT_SHA}"

          echo "dev_version=${DEV_VERSION}" >> "$GITHUB_OUTPUT"
          echo "ðŸ“¦ Dev version: ${DEV_VERSION}"
      - name: Apply dev version to package.json (npm)
        working-directory: ${{ inputs.workingDirectory }}
        env:
          DEV_VERSION: ${{ steps.tags.outputs.dev_version }}
        run: |
          set -euo pipefail
          npm version "$DEV_VERSION" --no-git-tag-version --allow-same-version
          echo "Using version: $(node -p "require('./package.json').version")"
      - name: Install
        working-directory: ${{ inputs.workingDirectory }}
        run: npm ci --prefer-offline --no-audit
      - name: Test (if present)
        working-directory: ${{ inputs.workingDirectory }}
        run: npm test -s || echo "No tests configured"
      - name: Build (if present)
        working-directory: ${{ inputs.workingDirectory }}
        run: npm run -s build || echo "No build script"
      - name: Pack (artifact)
        id: pack
        working-directory: ${{ inputs.workingDirectory }}
        run: |
          FILE=$(npm pack --silent)
          echo "tarball=$FILE" >> "$GITHUB_OUTPUT"
      - name: Upload tarball
        uses: actions/upload-artifact@v4
        with:
          name: npm-dev-tarball
          path: ${{ inputs.workingDirectory }}/${{ steps.pack.outputs.tarball }}
          retention-days: 7
      - name: Publish to GitHub Packages
        id: publish
        working-directory: ${{ inputs.workingDirectory }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Publishing $(node -p "require('./package.json').name")@$(node -p "require('./package.json').version") with tag 'dev'"
          npm publish --tag dev
          echo "did_publish=true" >> "$GITHUB_OUTPUT"
